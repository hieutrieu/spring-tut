<?php

namespace App\Controller\Admin;

use App\Libraries\Pagination\Paginator;
use App\Models\CallHistory;
use App\Models\Groups;
use App\Models\Users;
use Framework\Input;
use Framework\Response;
use PHPExcel_IOFactory;
use App\Libraries\Helper;

class UsersController extends AdminController
{
    public function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
        $this->setTitle('Users Manager');
    }

    public function index()
    {
        $page = intval(Input::get('page', 0));
        $condition[] = '1=1';
        $search = Input::get("search");
        //$condition = "admin != " . Users::ROLE_ADMIN;
        if (Users::ROLE_USER == $this->admin['permission']) {
            $condition[] = "id = {$this->admin['id']}";
        } else if (Users::ROLE_GROUP == $this->admin['permission']) {
            $condition[] = "group_id = {$this->admin["group_id"]}";
        }
        if ($search != '') {
            $condition[] = "( name LIKE '%{$search}%' or phone_number LIKE '%{$search}%' )";
        }

        $condition = implode(" AND ", $condition);
        $items = Users::getInstance()->getAll($condition, $page, 20, 'email DESC, phone_number ASC');
        $groups = Groups::getInstance()->getObjectsByField([]);
        $groupNames = [];
        foreach ($groups as $group) {
            $groupNames[$group['id']] = $group['name'];
        }
        $pager = new Paginator($items['items'], $items['total'], 20, $page);
        return $this->render('admin.users.index')->with(['pager' => $pager, 'groupNames' => $groupNames, 'search' => $search]);
    }

    public function export_index()
    {
        $page = intval(Input::get('page', 0));
        $condition[] = '1=1';
        $search = Input::get("search");
        //$condition = "admin != " . Users::ROLE_ADMIN;
        if (Users::ROLE_USER == $this->admin['permission']) {
            $condition[] = "id = {$this->admin['id']}";
        } else if (Users::ROLE_GROUP == $this->admin['permission']) {
            $condition[] = "group_id = {$this->admin["group_id"]}";
        }
        if ($search != '') {
            $condition[] = "( name LIKE '%{$search}%' or phone_number LIKE '%{$search}%' )";
        }

        $condition = implode(" AND ", $condition);
        $items = Users::getInstance()->getAll($condition, $page, 10000, 'email DESC, phone_number ASC');

        $objPHPExcel = new \PHPExcel();

        // Add Data in your file
        //header file
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1', 'STT ')
            ->setCellValue('B1', 'Name')
            ->setCellValue('C1', 'Phone Number')
            ->setCellValue('D1', 'Limited Cost (VND)')
            ->setCellValue('E1', 'Current Cost (VND)')
            ->setCellValue('F1', 'Email');
        $objPHPExcel->getActiveSheet()->getStyle("D1")->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
        $objPHPExcel->getActiveSheet()->getStyle("E1")->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
        //fill data to file
        $row_index = 1;
        $i = 1;
        foreach ($items["items"] as $item) {

            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue("A" . ($row_index + $i), $i)
                ->setCellValue("B" . ($row_index + $i), $item["name"] . ' - ' . $item['phone_number'])
                ->setCellValue("C" . ($row_index + $i), $item["phone_number"])
                ->setCellValue("D" . ($row_index + $i), Helper::formatCurrency($item["monthly_limited_cost"], 2, 0))
                ->setCellValue("E" . ($row_index + $i), Helper::formatCurrency($item["monthly_used_cost"], 2, 0))
                ->setCellValue("F" . ($row_index + $i), $item["email"]);

            //format cell
//            $objPHPExcel->getActiveSheet()->getStyle("F" . ($row_index + $i))->getNumberFormat()->setFormatCode('#,##0.00');
//            $objPHPExcel->getActiveSheet()->getStyle("G" . ($row_index + $i))->getNumberFormat()->setFormatCode('#,##0.00');
            $objPHPExcel->getActiveSheet()->getStyle("D" . ($row_index + $i))->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle("E" . ($row_index + $i))->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $i += 1;
        }
        //set with size cell auto
        $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setAutoSize(true);
        $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setAutoSize(true);
        $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setAutoSize(true);
        $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setAutoSize(true);

        // Rename worksheet
        $objPHPExcel->getActiveSheet()->setTitle("List Users");


        // Set active sheet index to the first sheet, so Excel opens this as the first sheet
        $objPHPExcel->setActiveSheetIndex(0);

        $fileName = 'export_' . date('Y-m-d h:i');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="' . $fileName . '.xls"');
        header('Cache-Control: max-age=0');

        // Do your stuff here

        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');

        // This line will force the file to download
        $objWriter->save('php://output');
        exit();
    }

    public function admin()
    {
        $page = intval(Input::get('page', 0));
        $condition = "admin = " . Users::ROLE_ADMIN;
        $items = Users::getInstance()->getAll($condition, $page);
        $pager = new Paginator($items['items'], $items['total'], 20, $page);
        return $this->render('admin.users.index')->with(array('pager' => $pager));
    }

    public function info($id)
    {
        $reportUrl = http_build_query($_GET);
        $reportUrl = htmlspecialchars("?$reportUrl");
        $page = intval(Input::get('page', 0));
        $search = Input::get('search');
        $conditions[] = "user_id = {$id}";
        if ($search != '') {
            $conditionDate = explode(' - ', $search);
            $conditions[] = "DATE(called_at) >= '{$conditionDate[0]}'";
            $conditions[] = "DATE(called_at) <= '{$conditionDate[1]}'";
        }

        $condition = implode(' AND ', $conditions);
        $items = CallHistory::getInstance()->getAll($condition, $page, 20, 'called_at DESC');
        $currentUser = Users::getInstance()->getOneObjectByField(['id' => $id]);
        $pager = new Paginator($items['items'], $items['total'], 20, $page);
        return $this->render('admin.users.info')->with([
            'pager' => $pager,
            'user' => $currentUser,
            'historyTotal' => $items['total'],
            'search' => $search,
            'id' => $id,
            "link_report" => $reportUrl
        ]);
    }

    public function edit($id)
    {

        if (Users::ROLE_GROUP == $this->admin['permission']) {
            $condition = "group_id = {$this->admin["group_id"]} and id =$id";
            $listUserByGroup = Users::getInstance()->getAll($condition);
            if (!$listUserByGroup["total"]) {
                return $this->redirect(url('admin/errors/access'));
            }
        } else if (Users::ROLE_USER == $this->admin['permission']) {
            if ($id != $this->admin['id']) {
                return $this->redirect(url('admin/errors/access'));
            }
        }
        $this->bc->add('Edit', 'admin/users/edit/' . $id);
        switch ($this->admin['permission']) {
            case Users::ROLE_USER: {
                $condition = "id ={$this->admin['group_id']}";
                $listGroup = Groups::getInstance()->getAll($condition);
                $listPermission = array("user" => "User");
            }
                break;
            case Users::ROLE_GROUP: {
                $condition = "id ={$this->admin['group_id']}";
                $listGroup = Groups::getInstance()->getAll($condition);
                $listPermission = array("group" => "Group", "user" => "User");
            }
                break;
            default: {
                $listGroup = Groups::getInstance()->getAll();
                $listPermission = array("admin" => "Admin", "group" => "Group", "user" => "User");
            }
        }

        if (!$id) {
            $member = null;
        } else {
            $member = Users::getInstance()->getOneObjectByField(array('id' => $id));
        }
        return $this->render('admin.users.edit')->with(array('member' => $member, "group" => $listGroup, "listPermission" => $listPermission));
    }

    /**
     * @return $this|void
     */
    public function save()
    {
        try {
            $id = intval(Input::get('id', 0));

            $listPermission = '';
            $inputPermission = Input::get('permission');
            $inputGroupId = Input::get("group_id");
            $exitGroup = Groups::getInstance()->getAll("id = {$inputGroupId}");
            if (!$exitGroup["total"]) {
                return $this->redirect(url('admin/errors/access'));
            }
            if (Users::ROLE_GROUP == $this->admin['permission']) {
                $condition = "group_id = {$this->admin["group_id"]} and id =$id";
                $listUserByGroup = Users::getInstance()->getAll($condition);
                if (!$listUserByGroup["total"]) {
                    return $this->redirect(url('admin/errors/access'));
                }
                $listPermission = array("group", "user");

            } else if (Users::ROLE_USER == $this->admin['permission']) {
                if ($id != $this->admin['id']) {
                    return $this->redirect(url('admin/errors/access'));
                }
                $listPermission = array("user");

            } else {
                $listPermission = array("user", "admin", "group");
            }
            if (!in_array($inputPermission, $listPermission)) {
                return $this->redirect(url('admin/errors/access'));
            }
            $monthlyLimitedCost = Input::get('monthly_limited_cost');
            $monthlyLimitedCost = str_replace(',', '', $monthlyLimitedCost);

            //get previous monthlycost of user
            $currentUser = Users::getInstance()->getOneObjectByField(array("id" => $id));
            $previousMonthlyLimitedCost = is_null($currentUser) ? 0 : $currentUser->monthly_limited_cost;
            $previousMonthlyUserCost = is_null($currentUser) ? 0 : $currentUser->monthly_used_cost;
            $data = array(
                'name' => Input::get('name'),
                'phone_number' => Input::get('phone_number'),
                'email' => Input::get('email'),
                'address' => Input::get('address'),
                'monthly_limited_cost' => $monthlyLimitedCost,
                'username' => Input::get('user_name'),
                'password' => md5('admin'),
                'group_id' => Input::get('group_id'),
                'permission' => Input::get('permission'),
                'monthly_used_cost' => $monthlyLimitedCost - $previousMonthlyLimitedCost + $previousMonthlyUserCost
            );
            if ($id) {
                $data = Users::getInstance()->update($data, array('id' => $id));
            } else {
                $data = Users::getInstance()->insert($data);
            }
            return Response::redirect(url('admin/users'));
        } catch (\Exception $e) {
            return $this->redirect(url('admin/errors/exception'));
        }
    }

    public function delete()
    {
        try {
            $id = intval(Input::get('id', 0));
            if (Users::ROLE_GROUP == $this->admin['permission']) {
                $condition = "group_id = {$this->admin["group_id"]} and id =$id";
                $listUserByGroup = Users::getInstance()->getAll($condition);
                if (!$listUserByGroup["total"]) {
                    return $this->redirect(url('admin/errors/access'));
                }
            } else if (Users::ROLE_USER == $this->admin['permission']) {
                if ($id != $this->admin['id']) {
                    return $this->redirect(url('admin/errors/access'));
                }
            }
            if ($id) {
                $data = Users::getInstance()->delete(array('id' => $id));
            }
            return Response::redirect(url('admin/users'));
        } catch (\Exception $e) {
            return $this->redirect(url('admin/errors/exception'));
        }
    }

    public function report($id)
    {
        $search = Input::get('search');
        $conditions[] = "user_id = {$id}";
        if ($search != '') {
            $conditionDate = explode(' - ', $search);
            $conditions[] = "DATE(called_at) >= '{$conditionDate[0]}'";
            $conditions[] = "DATE(called_at) <= '{$conditionDate[1]}'";
        }
        $condition = implode(' AND ', $conditions);
        $currentUser = Users::getInstance()->getOneObjectByField(['id' => $id]);
        $items = CallHistory::getInstance()->getAllHistoryByUser($condition);

        $objPHPExcel = new \PHPExcel();

        // Add Data in your file
        //header file
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('C5', 'STT ')
            ->setCellValue('D5', 'Date')
            ->setCellValue('E5', 'To')
            ->setCellValue('F5', 'Duration(s)')
            ->setCellValue('G5', 'Cost(VND)');
        $objPHPExcel->getActiveSheet()->getStyle("F5")->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
        $objPHPExcel->getActiveSheet()->getStyle("G5")->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
        //fill data to file
        $row_index = 5;
        $i = 1;
        foreach ($items["items"] as $item) {

            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue("C" . ($row_index + $i), $i)
                ->setCellValue("D" . ($row_index + $i), $item["called_at"])
                ->setCellValue("E" . ($row_index + $i), $item["to_phone_number"])
                ->setCellValue("F" . ($row_index + $i), $item["duration"])
                ->setCellValue("G" . ($row_index + $i), $item["cost"]);

            //format cell
            $objPHPExcel->getActiveSheet()->getStyle("F" . ($row_index + $i))->getNumberFormat()->setFormatCode('#,##0.00');
            $objPHPExcel->getActiveSheet()->getStyle("G" . ($row_index + $i))->getNumberFormat()->setFormatCode('#,##0.00');
            $objPHPExcel->getActiveSheet()->getStyle("C" . ($row_index + $i))->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle("E" . ($row_index + $i))->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $i += 1;
        }
        //set with size cell auto
        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setAutoSize(true);
        $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setAutoSize(true);
        $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setAutoSize(true);
        $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setAutoSize(true);
        $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setAutoSize(true);

        // Rename worksheet
        $objPHPExcel->getActiveSheet()->setTitle("{$currentUser->username}");


        // Set active sheet index to the first sheet, so Excel opens this as the first sheet
        $objPHPExcel->setActiveSheetIndex(0);

        $fileName = $currentUser->username . '_' . date('Y-m-d h:i');
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="' . $fileName . '.xls"');
        header('Cache-Control: max-age=0');

        // Do your stuff here

        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');

        // This line will force the file to download
        $objWriter->save('php://output');
        exit();
    }
}

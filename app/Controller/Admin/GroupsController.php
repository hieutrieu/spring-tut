<?php

namespace App\Controller\Admin;

use App\Libraries\Pagination\GroupUserPaginator;
use App\Libraries\Pagination\GroupUserCostPaginator;
use App\Libraries\Pagination\Paginator;
use App\Models\CallHistory;
use App\Models\Groups;
use App\Models\Users;
use Framework\Input;
use Framework\Response;
use Framework\Session\Session;
use PHPExcel;
use PHPExcel_IOFactory;

class GroupsController extends AdminController
{
    public function __construct()
    {

        parent::__construct(); // TODO: Change the autogenerated stub
        $this->setTitle('Groups Manager');
    }

    public function index()
    {
        if(isset($_SESSION["page_group_cost"]))
        {
            unset($_SESSION["page_group_cost"]);
        }

        if(isset($_SESSION["page_user_group"]))
        {
            unset($_SESSION["page_user_group"]);
        }
        $page = Input::get('page', 0);
        $condition[] = '1=1';
        $search = Input::get("search");
        if (Users::ROLE_GROUP == $this->admin['permission']) {
            $condition[] = "id = {$this->admin['group_id']}";
        }
        if ($search != '') {
            $condition[] = "name LIKE '%{$search}%'";
        }
        $condition = implode(" AND ", $condition);
        $items = Groups::getInstance()->getAll($condition, $page);
        $pager = new Paginator($items['items'], $items['total'], 20, $page);
        return $this->render('admin.groups.index')->with(array('pager' => $pager, 'search' => $search));
    }

    public function edit($id)
    {
        if (!Groups::getInstance()->checkAccess($this->admin['permission'], $this->admin['group_id'], $id)) {
            return $this->redirect(url('admin/errors/access'));
        }
        $this->bc->add('Edit', 'admin/groups/edit/' . $id);
        if (!$id) {
            $member = null;
        } else {
            $member = Groups::getInstance()->getOneObjectByField(array('id' => $id));
        }
        return $this->render('admin.groups.edit')->with(array('member' => $member));
    }

    function save()
    {
        try {
            $id = intval(Input::get('id', 0));
            if (!Groups::getInstance()->checkAccess($this->admin['permission'], $this->admin['group_id'], $id)) {
                return $this->redirect(url('admin/errors/access'));
            }
            $data = array(
                'name' => Input::get('name'),
                'description' => Input::get('description'),
                'block_in' => Input::get('block_in'),
                'block_out' => Input::get('block_out'),
                'block_telephone' => Input::get('block_telephone'),
                'second_in' => Input::get('second_in'),
                'second_out' => Input::get('second_out'),
                'second_telephone' => Input::get('second_telephone'),
                'minute_in' => Input::get('minute_in'),
                'minute_out' => Input::get('minute_out'),
                'minute_telephone' => Input::get('minute_telephone'),

            );
            if ($id) {
                $data = array_merge($data, ['created_at' => ['now()']]);
                $data = Groups::getInstance()->update($data, array('id' => $id));
            } else {
                $data = Groups::getInstance()->insert($data);
            }
            return Response::redirect(url('admin/groups'));
        } catch (\Exception $e) {

        }
    }

    public function delete()
    {
        try {
            $id = intval(Input::get('id', 0));
            if (!Groups::getInstance()->checkAccess($this->admin['permission'], $this->admin['group_id'], $id)) {
                return $this->redirect(url('admin/errors/access'));
            }

            //check user exist in group->don not delete group
            $listUserGroup = Users::getInstance()->getAll("group_id=$id");
            if ($listUserGroup["items"]) {
                return $this->redirect(url('admin.errors.exception'));
            }
            if ($id) {
                $data = Groups::getInstance()->delete(array('id' => $id));
            }
            return Response::redirect(url('admin/groups'));
        } catch (\Exception $e) {

        }
    }

    public function info($id)
    {
        $reportUrl = http_build_query($_GET);
        $reportUrl = htmlspecialchars("?$reportUrl");
        $active_tab=Input::get("active_tab");
        if($active_tab)
        {
            //group user active
            $page_user = intval(Input::get('page', 0));
            $page_group=Session::getInstance()->get("page_group_cost");
            if (!isset($page_group))
            {
                $page_group=0;
            }
            Session::getInstance()->set("page_group_cost",$page_group);
            Session::getInstance()->set("page_user_group",$page_user);
        }else
        {
            $page_group = intval(Input::get('page', 0));
            $page_user=Session::getInstance()->get("page_user_group");
            if (!isset($page_user))
            {
                $page_user=0;
            }
            Session::getInstance()->set("page_group_cost",$page_group);
            Session::getInstance()->set("page_user_group",$page_user);
        }
        $group = Groups::getInstance()->getOneObjectByField(['id' => $id]);
        $groupUsers = Users::getInstance()->getAll("group_id=$id",$page_user);
        $allUserGroup = Users::getInstance()->getObjectsByFields(["group_id"=>$id]);
        $userIds = $userPhone =$userNames= array();
        foreach ($allUserGroup as $groupUser) {
            $userIds[$groupUser['id']] = $groupUser['id'];
            $userNames[$groupUser['id']] = $groupUser['name'];
            $userPhone[$groupUser['id']] = $groupUser['phone_number'];
        }

		if(count($userIds) > 0) {
			$condition=implode(',',$userIds);
		} else {
			$condition = 0;
		}

        $search = Input::get('search');
        $conditionsDate[] = "1 = 1";
        if ($search != '') {
            $conditionDate = explode(' - ', $search);
            $conditionsDate[] = "DATE(called_at) >= '{$conditionDate[0]}'";
            $conditionsDate[] = "DATE(called_at) <= '{$conditionDate[1]}'";
        }
        $conditionsDate=implode(" AND ",$conditionsDate);
        $callHistories = CallHistory::getInstance()->getAllHistoryByUsers("user_id IN({$condition}) and {$conditionsDate}", $page_group);
        $pagerHistory = new GroupUserCostPaginator($callHistories['items'], $callHistories['total'], 20, $page_group);
        $pagerUser = new GroupUserPaginator($groupUsers['items'], $groupUsers['total'], 20, $page_user);
        return $this->render('admin.groups.info')->with([
            'pagerHistory' => $pagerHistory,
            'pagerUser' => $pagerUser,
            'group' => $group,
            'userTotal' => $callHistories['total'],
            'userNames' => $userNames,
            'userPhone' => $userPhone,
            'active_tab'=>$active_tab,
            'search' => $search,
            "link_report"=>$reportUrl
        ]);
    }

    public function  report($id)
    {
        $group = Groups::getInstance()->getOneObjectByField(['id' => $id]);
        $allUserGroup = Users::getInstance()->getObjectsByFields(["group_id"=>$id]);
        $userIds = $userPhone =$userNames= [];
        foreach ($allUserGroup as $groupUser) {
            $userIds[$groupUser['id']] = $groupUser['id'];
            $userNames[$groupUser['id']] = $groupUser['name'];
            $userPhone[$groupUser['id']] = $groupUser['phone_number'];
        }
        $condition=implode(',',$userIds);
        $search = Input::get('search');
        $conditionsDate[] = "1 = 1";
        if ($search != '') {
            $conditionDate = explode(' - ', $search);
            $conditionsDate[] = "DATE(called_at) >= '{$conditionDate[0]}'";
            $conditionsDate[] = "DATE(called_at) <= '{$conditionDate[1]}'";
        }
        $conditionsDate=implode(" AND ",$conditionsDate);
        $callHistories = CallHistory::getInstance()->getAllHistoryByGroup("user_id IN({$condition}) and {$conditionsDate}");
        $objPHPExcel = new PHPExcel();

        // Add Data in your file
        //header file
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('C5', 'STT ')
            ->setCellValue('D5', 'Fom')
            ->setCellValue('E5', 'Duration(s)')
            ->setCellValue('F5', 'Cost(VND)');
        $objPHPExcel->getActiveSheet()->getStyle("E5")->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
        $objPHPExcel->getActiveSheet()->getStyle("F5")->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
        //fill data to file
        $row_index=5;
        $i=1;
        foreach($callHistories["items"] as $item)
        {

            $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue("C".($row_index+$i), $i)
                ->setCellValue("D".($row_index+$i), $userNames[$item["user_id"]]."\n".$userPhone[$item["user_id"]])
                ->setCellValue("E".($row_index+$i), $item["total_cost"])
                ->setCellValue("F".($row_index+$i), $item["total_duration"]);

            //format cell
            $objPHPExcel->getActiveSheet()->getStyle("F".($row_index+$i))->getNumberFormat()->setFormatCode('#,##0.00');
            $objPHPExcel->getActiveSheet()->getStyle("E".($row_index+$i))->getNumberFormat()->setFormatCode('#,##0.00');
            $objPHPExcel->getActiveSheet()->getStyle("D".($row_index+$i))->getAlignment()->setWrapText(true);
            $objPHPExcel->getActiveSheet()->getStyle("C".($row_index+$i))->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $objPHPExcel->getActiveSheet()->getStyle("D".($row_index+$i))->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            $i+=1;
        }
        //set with size cell auto
        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setAutoSize(true);
        $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setAutoSize(true);
        $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setAutoSize(true);
        $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setAutoSize(true);

        // Rename worksheet
        $objPHPExcel->getActiveSheet()->setTitle("{$group->name}");


        // Set active sheet index to the first sheet, so Excel opens this as the first sheet
        $objPHPExcel->setActiveSheetIndex(0);

        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Group Cost.xls"');
        header('Cache-Control: max-age=0');

        // Do your stuff here

        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');

        // This line will force the file to download
        $objWriter->save('php://output');
    }
}
